<?xml version='1.0'?>
<!-- NOTE: this file is autogenerated by Apache XBean -->

<xs:schema elementFormDefault='qualified'
           targetNamespace='http://jax-ws.dev.java.net/spring/core'
           xmlns:xs='http://www.w3.org/2001/XMLSchema'
           xmlns:tns='http://jax-ws.dev.java.net/spring/core'>

  <!-- element for type: org.jvnet.jax_ws_commons.spring.SpringAddressingFeature -->
  <xs:element name='addressing'>
    <xs:annotation>
      <xs:documentation><![CDATA[
        Configures WS-Addressing feature.
      ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name='enabled' type='xs:boolean'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <tt>enabled="false"</tt> can be specified to override the {@link Addressing} annotation
on the source code. Defaults to true.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='required' type='xs:boolean'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            If true, the service will reject all requests that do not have addressing headers.
False to accept them. Defaults to false.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='id' type='xs:ID'/>
      <xs:anyAttribute namespace='##other' processContents='lax'/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.jvnet.jax_ws_commons.spring.SpringMTOMFeature -->
  <xs:element name='mtom'>
    <xs:annotation>
      <xs:documentation><![CDATA[
        Configures MTOM feature.
      ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name='enabled' type='xs:boolean'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <tt>enabled="false"</tt> can be specified to override the {@link MTOM} annotation
on the source code. Defaults to true.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='threshold' type='xs:integer'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            The size in bytes that binary data SHOULD be before
being sent as an attachment.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='id' type='xs:ID'/>
      <xs:anyAttribute namespace='##other' processContents='lax'/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.jvnet.jax_ws_commons.spring.SpringService -->
  <xs:element name='service'>
    <xs:annotation>
      <xs:documentation><![CDATA[
        Endpoint. A service object and the infrastructure around it.
      ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name='assembler' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              Sets the {@link TubelineAssembler} or {@link TubelineAssemblerFactory} instance.
<p>
This is an advanced configuration option for those who would like to control
what processing JAX-WS runtime performs. The default value is {@code null},
in which case the {@link TubelineAssemblerFactory} is looked up from the <tt>META-INF/services</tt>.
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='bean' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              Sets the bean that implements the web service methods.
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='binding' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              Accepts an externally configured {@link WSBinding}
for advanced users.
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='container' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              Sets the custom {@link Container}. Optional.
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='features' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              {@link WebServiceFeature}s that are activated in this endpoint.
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='unbounded'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='handlers' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              {@link Handler}s for this endpoint.
Note that the order is significant.

<p>
If there's just one handler and that handler is declared elsewhere,
you can use this as a nested attribute like <tt>handlers="#myHandler"</tt>.
Or otherwise a nested &lt;bean&gt; or &lt;ref&gt; tag can be used to
specify multiple handlers.
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='unbounded'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='invoker' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              Sets {@link Invoker} for this endpoint.
Defaults to {@link InstanceResolver#createDefault(Class) the standard invoker}.
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='metadata' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='primaryWsdl' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              Optional WSDL for this endpoint.

<p>
Defaults to the WSDL discovered in <tt>META-INF/wsdl</tt>,

<p>
It can be either {@link String},
{@link URL}, or {@link SDDocumentSource}.

If this is string, {@link ServletContext} (if available) and
{@link ClassLoader} are searched by this path, then failing that,
it's treated as an absolute {@link URL}.
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='resolver' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              Sets the {@link EntityResolver} to be used for resolving schemas/WSDLs
that are referenced. Optional.
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='servletContext' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              Set automatically by Spring if JAX-WS is used inside web container.
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace='##other' minOccurs='0' maxOccurs='unbounded' />
      </xs:sequence>
      <xs:attribute name='assembler' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Sets the {@link TubelineAssembler} or {@link TubelineAssemblerFactory} instance.
<p>
This is an advanced configuration option for those who would like to control
what processing JAX-WS runtime performs. The default value is {@code null},
in which case the {@link TubelineAssemblerFactory} is looked up from the <tt>META-INF/services</tt>.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='bean' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Sets the bean that implements the web service methods.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='binding' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Accepts an externally configured {@link WSBinding}
for advanced users.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='bindingID' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Sets the binding ID, such as <tt>{@value SOAPBinding#SOAP11HTTP_BINDING}</tt>
or <tt>{@value SOAPBinding#SOAP12HTTP_BINDING}</tt>.

<p>
If none is specified, {@link BindingType} annotation on SEI is consulted.
If that fails, {@link SOAPBinding#SOAP11HTTP_BINDING}.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='container' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Sets the custom {@link Container}. Optional.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='impl' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Fully qualified class name of the SEI class. Required.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='invoker' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Sets {@link Invoker} for this endpoint.
Defaults to {@link InstanceResolver#createDefault(Class) the standard invoker}.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='metadata' type='xs:string'/>
      <xs:attribute name='portName' type='xs:QName'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Sets the port name of this endpoint.
Defaults to the name inferred from the impl attribute.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='primaryWsdl' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Optional WSDL for this endpoint.

<p>
Defaults to the WSDL discovered in <tt>META-INF/wsdl</tt>,

<p>
It can be either {@link String},
{@link URL}, or {@link SDDocumentSource}.

If this is string, {@link ServletContext} (if available) and
{@link ClassLoader} are searched by this path, then failing that,
it's treated as an absolute {@link URL}.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='resolver' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Sets the {@link EntityResolver} to be used for resolving schemas/WSDLs
that are referenced. Optional.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='serviceName' type='xs:QName'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Sets the service name of this endpoint.
Defaults to the name inferred from the impl attribute.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='servletContext' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Set automatically by Spring if JAX-WS is used inside web container.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='id' type='xs:ID'/>
      <xs:anyAttribute namespace='##other' processContents='lax'/>
    </xs:complexType>
  </xs:element>


</xs:schema>
